*edit_alternate.txt*    Edit alternate files and other file switching utilities

Author: TJ DeVries


================================================================================
Configuration Options:                                  *edit_alternate-options*

defaults...............................................*edit_alternate.defaults*


defaults.file_print                         *edit_alternate.defaults.file_print*

  Type: |Bool|
  Default: `v:false`

  (Boolean): Whether to print the filename on switching.

  To configure:
    `call edit_alternate#conf#set("defaults", "file_print", <value>)`

  To view:
    `call edit_alternate#conf#get("defaults", "file_print")`


defaults.enable_default_rules     *edit_alternate.defaults.enable_default_rules*

  Type: |Bool|
  Default: `v:true`

  (Boolean): Automatically add the default rules provided by the plugin.

  To configure:
    `call edit_alternate#conf#set("defaults", "enable_default_rules", <value>)`

  To view:
    `call edit_alternate#conf#get("defaults", "enable_default_rules")`


defaults.debug                                   *edit_alternate.defaults.debug*

  Type: |Bool|
  Default: `v:false`

  (Boolean): Whether to print out debug messages during execution.

  To configure:
    `call edit_alternate#conf#set("defaults", "debug", <value>)`

  To view:
    `call edit_alternate#conf#get("defaults", "debug")`


defaults.oops_order                         *edit_alternate.defaults.oops_order*

  Type: |List|
  Default: `['.c', '.cpp', '.h', '.py']`

  (List): A list of the order of oops files to open

  To configure:
    `call edit_alternate#conf#set("defaults", "oops_order", <value>)`

  To view:
    `call edit_alternate#conf#get("defaults", "oops_order")`

mappings...............................................*edit_alternate.mappings*


mappings.EditAlternate                   *edit_alternate.mappings.EditAlternate*

  Type: |String|
  Default: `<leader>ea`

  Default mapping for `EditAlternate`. Set to "" to disable mapping

  Action:
>
       function <lambda>315(def, old, new, ...) closure
    1  return dict.result(def, old, new)-
       endfunction
<

  To configure:
    `call edit_alternate#conf#set("mappings", "EditAlternate", <value>)`

  To view:
    `call edit_alternate#conf#get("mappings", "EditAlternate")`


mappings.EditOops                             *edit_alternate.mappings.EditOops*

  Type: |String|
  Default: `<leader>eo`

  Default mapping for `EditOops`. Set to "" to disable mapping

  Action:
>
       function <lambda>326(def, old, new, ...) closure
    1  return dict.result(def, old, new)-
       endfunction
<

  To configure:
    `call edit_alternate#conf#set("mappings", "EditOops", <value>)`

  To view:
    `call edit_alternate#conf#get("mappings", "EditOops")`


================================================================================
Configuration Functions:                              *edit_alternate-functions*

                                                *edit_alternate#conf#version(()*
edit_alternate#conf#version()
    Get the version for this plugin
    Returns a semver dict

                                                    *edit_alternate#conf#set(()*
edit_alternate#conf#set(area, setting, value)
    Set a "value" for the "area.setting"
    See |conf.set_setting|

                                                    *edit_alternate#conf#get(()*
edit_alternate#conf#get(area, setting)
    Get the "value" for the "area.setting"
    See |conf.get_setting}

                                            *edit_alternate#conf#insert_docs(()*
edit_alternate#conf#insert_docs()
    Insert the generated docs under where you cursor is

                                                *edit_alternate#conf#require(()*
edit_alternate#conf#require(semver)
    Require a version of this plugin.
    Returns false if not a high enough version

                                                  *edit_alternate#conf#__sid(()*
edit_alternate#conf#__sid()

                                                  *edit_alternate#conf#debug(()*
edit_alternate#conf#debug()
    Print a debug statement containing information about the plugin
    and the versions of required plugins

                                                   *edit_alternate#conf#view(()*
edit_alternate#conf#view()
    View the current configuration dictionary.
    Useful for debugging

                                                   *edit_alternate#conf#menu(()*
edit_alternate#conf#menu()
    Provide the user with an automatic "quickmenu"
    See |conf.menu|

                                          *edit_alternate#conf#generate_docs(()*
edit_alternate#conf#generate_docs()
    Returns a list of lines to be placed in your documentation
    Can use :call append(line("%"), func())



 vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl:
